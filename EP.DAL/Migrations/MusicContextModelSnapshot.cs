// <auto-generated />
using System;
using EP.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EP.DAL.Migrations
{
    [DbContext(typeof(MusicContext))]
    partial class MusicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EP.DOMAIN.Artist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("NameArtist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("EP.DOMAIN.Composer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("Birtday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("LEFT(FirstName,1) + '.' + LastName", true);

                    b.HasKey("ID");

                    b.ToTable("Composers");
                });

            modelBuilder.Entity("EP.DOMAIN.Piece", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ComposerID")
                        .HasColumnType("int");

                    b.Property<string>("NamePiece")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ComposerID");

                    b.HasIndex("TypeID");

                    b.ToTable("Pieces");
                });

            modelBuilder.Entity("EP.DOMAIN.PieceArtist", b =>
                {
                    b.Property<int>("PieceID")
                        .HasColumnType("int");

                    b.Property<int>("ArtistID")
                        .HasColumnType("int");

                    b.HasKey("PieceID", "ArtistID");

                    b.HasIndex("ArtistID");

                    b.ToTable("PiecesArtists");
                });

            modelBuilder.Entity("EP.DOMAIN.Type", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("NameType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("EP.DOMAIN.Piece", b =>
                {
                    b.HasOne("EP.DOMAIN.Composer", "Composer")
                        .WithMany("Pieces")
                        .HasForeignKey("ComposerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EP.DOMAIN.Type", "Type")
                        .WithMany("Pieces")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composer");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EP.DOMAIN.PieceArtist", b =>
                {
                    b.HasOne("EP.DOMAIN.Artist", "Artist")
                        .WithMany("Pieces")
                        .HasForeignKey("ArtistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EP.DOMAIN.Piece", "Piece")
                        .WithMany("Artists")
                        .HasForeignKey("PieceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Piece");
                });

            modelBuilder.Entity("EP.DOMAIN.Artist", b =>
                {
                    b.Navigation("Pieces");
                });

            modelBuilder.Entity("EP.DOMAIN.Composer", b =>
                {
                    b.Navigation("Pieces");
                });

            modelBuilder.Entity("EP.DOMAIN.Piece", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("EP.DOMAIN.Type", b =>
                {
                    b.Navigation("Pieces");
                });
#pragma warning restore 612, 618
        }
    }
}
